#1  Googleの拡張機能の追加
　React developer Tools


#2  Reactの準備

    ステップ 1：HTML に DOM コンテナを追加する
    <div id="root"></div>

    ステップ 2：script タグを追加する *</body> タグの直前に追加
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>

    *crossorigin属性を付ける

    ステップ 3：React コンポーネントを作成する
    (() => {
        ReactDOM.render(
        <p>Hello!</p>,
        document.getElementById('root')
        );
    })();


#3  変数の表示
    const name = 'takahiro';
    ReactDOM.render(
        <p>{name.toUpperCase()}</p>,
        document.getElementById('root')
    );

#4  JSX注意
    ・親要素はひとつだけ
    ・必ず閉じタグをつける　<hr/>

#5  属性とイベント
    ・class属性　className="box"
    ・style属性　style={{width:100, height:100, backgroundColor:'tomato'}}
    ・イベント関数　onClick={showMessage}

#6  Componentの扱い
    ※Conpornentの一文字目は、大文字。

    // Conpornentの作成
    function Counter() {
        return <div>0</div>;
    };

    // Comprnentの呼び出し
    <Counter />

#7  Propsを使う
    ※Propsは読込み専用（書換え不可）なので注意

    // Conpornentの作成
    function Counter( props ) {
        return <div>0</div>;
    };

    // Comprnentの呼び出し
    <Counter colot="red"/>


#9  イベントに引数を渡す

    // 関数の呼び出し　※{}内に無名関数を渡す
    onClick={ () => countUp(props.color)}

    // 引数の受け取り
    function countUp( color ){
        alert('count up!'+color);
    }


    //<a>にイベントを渡すとき　ページ遷移防止
    <a href="#" onClick={ e => countUp(e, props.color)}> 0 </a>

    function countUp( e, color ) {
        e.preventDefault();
        alert(color);
    }


#10 Classの書換え
    Component ですが、いままで関数で作ってきましたが、あとで見ていく state という仕組みを使うには class で書き換えてあげる必要があります。
    ＊render()メソッド内にreturnを書く
    ＊this.prpps(thisをつける)

    class Counter extends React.Component {
        render() {
            return (
                <li style={{backgroundColor:this.props.color}}>
                0
                </li>
            );
        }
    }


#11 Stateを使う
    state は UI の書き換えに必要となる Component の状態を保持するためのデータと思っておけば OK です。

    class Counter extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                count: 10
            };
        }
        render() {
            return (
                <li style={{backgroundColor:this.props.color}}>
                    {this.state.count}
                </li>
            );
        }
    }


#12 React Developer Toolsを使う

    デベロッパーツールの「コンポーネント」を開く
    ->Conpornentの保持するpropsやstateの値を確認できる


#13 setStateでstateの値を更新する

    1) クリックイベントを仕込む
    <li onClick={this.countUp}>{this.state.count}</li>

    2) メソッド(countUP)をつくる
    ＊React では this.state に値がセットできるのは constructor の中だけで、それ以外の場所では setState を使わないといけないというルールになっています。
    ＊setState が実行されるタイミングは React が勝手に決めるので、こう書いてしまうと count の値がほかの処理で書き換わってしまって、うまくカウントアップできない場合もあります。
    ->
    state の変更前の値を取得できるようになっていて、その場合は prevState で…、アロー関数式でこのように書いてあげれば、 prevState に直前の値が入ってくるので、その値を使って書き換えてあげれば OK です。
    countUp() {
        this.setState(prevState => {
            return {
                count: prevState.count + 1
            };
        });
    }

    3) constructorにメソッドをbindする
    ＊constructor の方で this.countUp にこの class 自体を bind してあげる
    constructor(props) {
        super(props);
        this.state = { count: 0, };

        this.countUp = this.countUp.bind(this);
    }



#14 共通要素でStateを管理
    React では state を持つ Component は最小限にしてあげて、その他の Component には極力値を持たせないという設計が良いとされている
        // 子コンポーネント
        function Counter(props) {
            return (
                <li style={{backgroundColor:props.counter.color}}>
                    {props.counter.id}:{props.counter.count}
                </li>
            );
        }
        // 親コンポーネント
        class App extends React.Component {
            constructor() {
                super();
                this.state = {
                    counters: [
                        {id: 'A', count: 0, color: 'tomato'},
                        {id: 'B', count: 0, color: 'skyblue'},
                        {id: 'C', count: 0, color: 'limegreen'},
                    ]
                };
            }
            render() {
                return (
                    <ul>
                        <Counter counter={this.state.counters[0]}/>
                        <Counter counter={this.state.counters[1]}/>
                        <Counter counter={this.state.counters[2]}/>
                    </ul>
                );
            }
        }


#16 ループで要素を作る
    ループで処理する要素には key というユニークな値を付ける
    function Counter(props) {
        return (
            <li style={{backgroundColor:props.counter.color}}>
                {props.counter.id}:{props.counter.count}
            </li>
        );
    }
    function CounterList(props){
        const counters = props.counters.map( counter => {
            return (
                <Counter
                    counter={counter}
                    key={counter.id}
                />
            );
        });
        return (
            <ul>
                {counters}
            </ul>
        );
    }



#17 イベント処理を親要素に渡す
    // 子コンポーネント
    function Counter(props) {
        return (
            <li style={{backgroundColor:props.counter.color}}
            onClick={ () => props.countUp(props.counter)}
            >
                {props.counter.id}:{props.counter.count}
            </li>
        );
    }

    function CounterList(props){
        const counters = props.counters.map( counter => {
            return (
                <Counter
                    counter={counter}
                    key={counter.id}
                    countUp={props.countUp}
                />
            );
        });
        return (
            <ul>
                {counters}
            </ul>
        );
    }


    // 親コンポーネント
    class App extends React.Component {
        constructor() {
            super();
            this.state = {
                counters: [
                    {id: 'A', count: 0, color: 'tomato'},
                    {id: 'B', count: 0, color: 'skyblue'},
                    {id: 'C', count: 0, color: 'limegreen'},
                ],
                total: 0,
            };
            this.countUp = this.countUp.bind(this);
        }
        countUp(counter) {
            this.setState(prevState => {
                const counters = prevState.counters.map(counter => {
                    return {id: counter.id, count: counter.count, color: counter.color};
                });
                const pos = counters.map(counter => {
                    return counter.id;
                }).indexOf(counter.id);
                counters[pos].count++;

                return {
                    counters: counters,
                    total: prevState.total +1
                };
            });
        }

        render() {
            return (
                <div className="container">
                    <CounterList 
                        counters={this.state.counters} 
                        countUp={this.countUp}
                    />
        
                    <div>TOTAL INVENTORY:{this.state.total}</div>
                </div>
            );
        }

    }

    ReactDOM.render(
        <App />,
        document.getElementById('root')
    );
